<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo-博客搭建、问题与解决办法</title>
    <url>/2025/04/09/Hexo-MyBlog/</url>
    <content><![CDATA[<p>该博客主要介绍使用Hexo工具在Github上搭建Next主题个人博客的简要过程，列举所参考的视频与帖子连接，同时汇总个人搭建过程中遇到的各种错误和解决办法。</p>
<span id="more"></span>

<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p>博客搭建所使用的部件如下：</p>
<ul>
<li>Github：用于博客线上浏览</li>
<li>Git: 线上推送工具</li>
<li>Hexo：用于管理本地博客内容、主题与线上推送</li>
<li>Sublime Text：用于管理博客文件夹，无需来回跳转</li>
</ul>
<p>博客搭建所用的参考视频为：</p>
<p>【1】<a href="https://www.bilibili.com/video/BV1cW411A7Jx/?spm_id_from=333.337.top_right_bar_window_history.content.click&vd_source=5465b0f4790ebae45362caa6519f3b79">hojun_cn|手把手教你搭建属于自己的hexo+github博客-BiliBili</a></p>
<p>博客美化参考的教程如下：</p>
<p>【1】<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">Hexo-NexT</a></p>
<p>【2】<a href="https://vic.kim/2019/05/25/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">Hexo博客优化之Next主题美化 | Vicの博客</a></p>
<p>【3】<a href="https://xiamu-ssr.github.io/Hexo/2024/06/19/2024-H1/2024-06-19-12-31-52/">如何优雅的使用Github Action服务来将Hexo部署到Github Pages - Hexo</a></p>
<p>【4】<a href="https://github.com/theme-next/theme-next-canvas-nest/blob/master/README.md">Hexo v7.0+的canvas-nest插件配置-Github</a></p>
<p>【5.1】<a href="https://blog.csdn.net/Aoman_Hao/article/details/89416634">Hexo博客Next主题建立标签云-CSDN博客</a></p>
<p>【5.2】<a href="https://github.com/D0n9X1n/hexo-tag-cloud/blob/master/README.ZH.md">Hexo的hexo-tag-cloud插件使用手册-Github</a></p>
<p>【6】<a href="https://blog.csdn.net/kantaiyang/article/details/129159055">Hexo无法显示本地图片的问题-CSDN博客</a></p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>Hexo创建本地博客仓库后，使用<strong>控制台</strong>或<strong>Git Bash Here</strong>输入指令进行博文管理，详见<a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a>，以下简要介绍常用指令</p>
<ol>
<li><p>网站生成–生成本地网站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
</li>
<li><p>网站推送–推送至github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建本地端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s -p 5555</span><br></pre></td></tr></table></figure>

<p>该指令将创建本地5555端口，可在浏览器中输入<code>localhost:5555</code>进行查看，但并未推送至线上。</p>
</li>
</ol>
<h2 id="问题与解决办法"><a href="#问题与解决办法" class="headerlink" title="问题与解决办法"></a>问题与解决办法</h2><p>虽然有视频参考，但作者在使用时仍然出现一些问题，在此记录，希望对各位有所帮助。</p>
<h3 id="本地仓库初始化失败"><a href="#本地仓库初始化失败" class="headerlink" title="本地仓库初始化失败"></a>本地仓库初始化失败</h3><p><strong>原因1：在Github创建仓库时的仓库名与本地仓库名不一致。</strong></p>
<p>举个栗子：作者在Github的仓库名为<code>AAA</code>，那么使用<code>hexo init AAA</code>指令时的本地仓库路径应该为<code>C:\Blog</code>，文件夹名称为<code>AAA</code>。</p>
<p><strong>原因2：无法在某个硬盘的根目录下创建仓库。例如在<code>C:</code>文件夹下初始化将失败。</strong></p>
<p>举个栗子：在本地文件夹下应该创建子文件夹，如<code>C:\Blog</code>或者你喜欢的其他名称。</p>
<p><strong>原因3：SSL证书报错，如下。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init AAA</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/hexojs/hexo-starter.git/&#x27;</span>: SSL certificate problem: unable to get <span class="built_in">local</span> issuer certificate</span><br><span class="line">WARN  git <span class="built_in">clone</span> failed. Copying data instead</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>

<p>解决办法：首先下载最新版本Git，某些旧版本可能会失败。其次，Git在下载后默认为Linux终端加密，使用以下指令修改配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global http.sslbackend schannel</span><br></pre></td></tr></table></figure>

<p><span style="color:red"><strong>不建议使用以下指令：该指令关闭安全检查，可能会受到外部攻击。</strong></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<h3 id="更改主题后生成时报错"><a href="#更改主题后生成时报错" class="headerlink" title="更改主题后生成时报错"></a>更改主题后生成时报错</h3><p>此时进行本地查看，网页端将显示空白界面。生成阶段的报错信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARN  No layout: 2025/04/09/hello-world/index.html</span><br><span class="line">WARN  No layout: archives/index.html</span><br><span class="line">WARN  No layout: archives/2025/index.html</span><br><span class="line">WARN  No layout: archives/2025/04/index.html</span><br><span class="line">WARN  No layout: index.html</span><br></pre></td></tr></table></figure>

<p>原因1：主题包名称与<code>_config.yml</code>中不一致，检查文件名。</p>
<p>举个例子：作者使用<code>next</code>主题，在github上下载的主题包名称为<code>xxxx_next_xxx</code>形式。将主题包与<code>_config.yml</code>中修改为<code>next</code>或其他相同的名称即可。</p>
<p>原因2：原有缓存内容未更新。使用以下指令重新生成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>

<h3 id="无法推送至Github仓库"><a href="#无法推送至Github仓库" class="headerlink" title="无法推送至Github仓库"></a>无法推送至Github仓库</h3><p>原因1：仓库分支名有误。Github默认仓库名曾由<code>master</code>修改为<code>mian</code>， 但Hexo默认分支为<code>master</code>。</p>
<p>解决办法：在<code>_config.yml</code>内找到<code>branch </code>分支，并修改为<code>main</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">	<span class="string">type:git</span></span><br><span class="line">	<span class="string">repo:xxx</span> <span class="comment">#你的Github仓库</span></span><br><span class="line">	<span class="string">branch：main</span></span><br></pre></td></tr></table></figure>



<h3 id="新增侧边栏项目后出错"><a href="#新增侧边栏项目后出错" class="headerlink" title="新增侧边栏项目后出错"></a>新增侧边栏项目后出错</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">YAMLException: can not <span class="built_in">read</span> a block mapping entry; a multiline key may not be an implicit key (4:1)</span><br></pre></td></tr></table></figure>

<p>原因1：文件的<code>front-matter</code>内存在中英文字符混用。</p>
<p>解决办法：使用英文字符，并且后跟空格。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 关于</span><br><span class="line"><span class="built_in">date</span>: 2025-04-16 13:20:26</span><br><span class="line">tags: about</span><br></pre></td></tr></table></figure>



<h3 id="创建新标签后访问错误"><a href="#创建新标签后访问错误" class="headerlink" title="创建新标签后访问错误"></a>创建新标签后访问错误</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Cannot GET /about/</span><br></pre></td></tr></table></figure>

<p>原因1：可能并未创建对应的文件夹，或者文件名称有误。</p>
<p>解决办法：new page创建新文件夹，文件夹内的文件名<strong>必须为<code>index.md</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure>

<p>并且注意，此时需要更改内部的tags，比如</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 关于</span><br><span class="line"><span class="built_in">date</span>: 2025-04-16 13:20:26</span><br><span class="line">tags: about</span><br></pre></td></tr></table></figure>

<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h3 id="博客分类"><a href="#博客分类" class="headerlink" title="博客分类"></a>博客分类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure>

<p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p>
<h3 id="修改分类间隔符"><a href="#修改分类间隔符" class="headerlink" title="修改分类间隔符"></a>修改分类间隔符</h3><p>如果希望保留多语言支持，可以修改翻译文件中的 <code>symbol.comma</code> 定义：</p>
<ol>
<li><p>找到主题的语言文件（如中文）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">themes/next/languages/zh-CN.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>symbol.comma</code> 的值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">symbol:</span><br><span class="line">  comma: <span class="string">&quot; / &quot;</span>  <span class="comment"># 将逗号改为斜杠</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p><em>且视他人之疑目如盏盏鬼火，大胆地去走你的夜路。–史铁生 《病隙随笔》</em></p>
</blockquote>
]]></content>
      <categories>
        <category>实用工具</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>SpaceDesk-Win与iPad有线副屏扩展与常见问题</title>
    <url>/2025/04/19/SpaceDesk-SecondaryScreen/</url>
    <content><![CDATA[<p>Win与平板在同一无线网络下，很容易实现无线连接，但无线延迟较高、设备易发热。有线连接延迟低、帧率高，这篇博客可以让闲置的iPad来跳“最后一舞”，前提是有一个正在吃灰的iPad…</p>
<span id="more"></span>

<h2 id="设备说明"><a href="#设备说明" class="headerlink" title="设备说明"></a>设备说明</h2><ul>
<li>Windows 11,	Type-C</li>
<li>iPad Air4，	Type-C</li>
<li>iPad原装双端Type-C数据线</li>
</ul>
<h2 id="软件说明"><a href="#软件说明" class="headerlink" title="软件说明"></a>软件说明</h2><h3 id="Win端"><a href="#Win端" class="headerlink" title="Win端"></a>Win端</h3><ol>
<li><p>下载安装SpaceDesk</p>
<p>SpaceDesk官网：<a href="https://www.spacedesk.net/download/#server-driver">最新版本 点击下载</a></p>
<p>百度网盘：<a href="https://pan.baidu.com/s/18-q_8Ee8a7pfuRcNfBlofw?pwd=8eis">v2.1.15 点击下载</a></p>
</li>
<li><p>下载安装iTunes</p>
<p>打开Win自带的微软商店，搜索下载。</p>
<p><img src="image-20250419103753851.png" alt="image-20250419103753851"></p>
<p>疑似v2.1.15 版本的SpaceDesk不具备iPad连接的驱动，需要使用iTunes连接1次，后续就不再使用。</p>
</li>
</ol>
<h3 id="iPad-端"><a href="#iPad-端" class="headerlink" title="iPad 端"></a>iPad 端</h3><p>App Store 搜索spacedesk下载。</p>
<p><img src="image-20250419104020718.png" alt="image-20250419104020718"></p>
<p>安装完成后打开软件，设置最高画质、自动旋转、自动改变IP等，iPad端无需其他操作。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="黑白显示"><a href="#黑白显示" class="headerlink" title="黑白显示"></a>黑白显示</h3><p>原因：SpaceDesk并非是最新版本。下载官网最新版本。</p>
<h3 id="连接Type-c无反应"><a href="#连接Type-c无反应" class="headerlink" title="连接Type-c无反应"></a>连接Type-c无反应</h3><p>原因：汉化包Bug。</p>
<p>打开安装包，Remove当前安装版本，重新安装，不要打汉化</p>
<h3 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h3><p>【1】<a href="https://blog.csdn.net/qq_42013947/article/details/136596644?ops_request_misc=&request_id=&biz_id=102&utm_term=LXHYouth&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-136596644.142%5Ev102%5Epc_search_result_base6&spm=1018.2226.3001.4187">LXHYouth|使用SpaceDesk实现iPad成为电脑拓展屏(保姆级教程)-CSDN博客</a></p>
<p>【2】<a href="https://www.bilibili.com/video/BV1NQ4y1A7PD/?share_source=copy_web&vd_source=793e603d878f9531350764468aa132ce">我想当饼藏|ipad作为副屏与Windows电脑有线连接-哔哩哔哩</a></p>
<p>【3】<a href="https://www.bilibili.com/opus/912838630992510994?spm_id_from=333.1387.0.0">咸鱼羊同学|Windows与iPad有线副屏SpaceDesk扩展与常见问题 - 哔哩哔哩</a></p>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p><em>他山之石，可以攻玉。–《诗·小雅·鹤鸣》</em></p>
</blockquote>
]]></content>
      <categories>
        <category>实用工具</category>
        <category>SpaceDesk</category>
      </categories>
      <tags>
        <tag>iPad副屏</tag>
        <tag>有线连接</tag>
      </tags>
  </entry>
  <entry>
    <title>FPGA-01-关于ZYNQ</title>
    <url>/2025/04/20/FPGA-01-About_ZYNQ/</url>
    <content><![CDATA[<p>该博文介绍FPGA的相关基础知识，如制造厂商、主要功能等。</p>
<span id="more"></span>

<h2 id="PLD器件"><a href="#PLD器件" class="headerlink" title="PLD器件"></a>PLD器件</h2><p>FPGA: Field Programmable Gate Array，即现场可编程门阵列，属于可编程器件PLD（Programmable Logic Device），类似的有PLA、PAL、CPLD等器件。</p>
<h3 id="PLA与PROM"><a href="#PLA与PROM" class="headerlink" title="PLA与PROM"></a>PLA与PROM</h3><p>PLA与PROM为早期反熔丝型PLD电路。PLA（Programmable Logic array）中通过与门、非门构成“与平面”，“或平面”，以及一次性的编程矩阵。</p>
<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420205204194.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    PLA内部结构	<!--标题-->
    </center>
</div>
可编程只读存储器PROM（Programmable Read-Only Memory）与PLA类似，均是通过“与连接矩阵与“或连接矩阵”组成，**但是PROM的结构上与连接矩阵固定，仅"或矩阵"可进行一次编程**，如下图。

<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420210628775.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    PROM内部结构	<!--标题-->
    </center>
</div>

<h3 id="PAL与GAL"><a href="#PAL与GAL" class="headerlink" title="PAL与GAL"></a>PAL与GAL</h3><p>在PLA与PROM的基础上又延伸出其他两种类型，即PAL（Programmable Array Logic）和GAL（Generic Array Logic）。</p>
<p>其中PAL相对于PROM结构类似，只是<strong>PAL是仅”与连接矩阵”可编程</strong>，仍然为反熔丝工艺，仅可编程1次。</p>
<p>PAL根据输出电路工作模式可分为三类：</p>
<ul>
<li>三态输出</li>
<li>寄存器输出</li>
<li>互补输出</li>
</ul>
<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420211339732.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    PAL内部结构	<!--标题-->
    </center>
</div>

<p>GAL相对于PAL改进：</p>
<ul>
<li>CMOS工艺，电可擦除，可多次编程</li>
<li>可编程的输出逻辑宏单元OLMC（Output Logic Macro Cell）</li>
</ul>
<p>其中OLMC可通过编程控制GAL输出，覆盖PAL的三种模式。</p>
<h3 id="CPLD与FPGA"><a href="#CPLD与FPGA" class="headerlink" title="CPLD与FPGA"></a>CPLD与FPGA</h3><p>复杂可编程逻辑器件CPLD（Complex Programmable Logic Device）可以看作若干PLA与可编程连接矩阵的集合。内部结构如图。</p>
<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420215617600.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    CPLD内部结构	<!--标题-->
    </center>
</div>

<p>FPGA内大量使用LUT查找表和寄存器，可分为SRAM、反熔丝、Flash三种类型，包括可编程的：</p>
<ul>
<li>逻辑块</li>
<li>布线资源</li>
<li>IO口</li>
</ul>
<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420204136714.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    FPGA与CPLD对比	<!--标题-->
    </center>
</div>

<p>FPGA的应用场景对比单片机和ARM，主要优势9是灵活高效、高吞吐量、低批量延时、快速并行运算、可重构、可重复编程、可实现定制性能和定制功耗。</p>
<h2 id="ZYNQ"><a href="#ZYNQ" class="headerlink" title="ZYNQ"></a>ZYNQ</h2><p>Xilinx内的ZYNQ系列芯片内包括一块Cortex-A9的硬件ARM处理器，称为为PS。其余的逻辑部分，称为PL，PL上可以使用逻辑块搭载MicroBlaze软核处理器。</p>
<h3 id="PS-端"><a href="#PS-端" class="headerlink" title="PS 端"></a>PS 端</h3><p>ZYNQ内除去ARM外，还包括应用处理单元APU（Application Processing Unit）、扩展外设、cache存储器、存储器接口、互联接口、时钟发生电路。</p>
<h4 id="APU"><a href="#APU" class="headerlink" title="APU"></a>APU</h4><div>
    <center>
        <img src="image-20250425103918783.png" alt="image can't load." style="zoom:75%">
        <br>
    <center>
      APU框架
</center></center></div>

<ul>
<li>双ARM核、NEONTM媒体处理引擎MPE（Media Processing Engine）、浮点计算单元FPU（Floating Point Unit）、内存管理单元MMU（Memory Management Unit）、一级cache存储器（指令+数据）</li>
<li>一致性控制单元SCU（Snoop Control Unit）：ARM与OCM和二级cache之间的连接桥。可用加速一致端口ACP（Accelerator Coherency Port）管理PS与PL的访问</li>
<li>二级cache、片上存储器OCM（On Chip Memory），包括256kB的RAM和128kB的BootRAM。</li>
</ul>
<h4 id="存储器接口"><a href="#存储器接口" class="headerlink" title="存储器接口"></a>存储器接口</h4><p>ZYNQ-7000系列存储器接口包括动态+静态口。</p>
<ul>
<li><p>动态存储器控制器</p>
<ol>
<li>核心存储控制器和调度器DDRC</li>
<li>AXI存储器端口接口DDRI</li>
<li>数字PHY及控制器DDBP，可用于DDR2&#x2F;3、DDR3L、LPDDR2</li>
</ol>
</li>
<li><p>静态存储控制器</p>
<p>SMC（Static Memory Controller），可用作NAND闪存控制器、或并口存储器控制器，支持NAND闪存、NOR闪存、异步SRAM。</p>
</li>
<li><p>QSPI</p>
<p>程序烧录，程序固化。</p>
</li>
</ul>
<h4 id="外部接口"><a href="#外部接口" class="headerlink" title="外部接口"></a>外部接口</h4><p>PS和外部通信主要通过复用的输入&#x2F;输出MIO（Multiplexed Input&#x2F;Output，MIO）实现，直接连接在PS端。但扩展的MIO即EMIO需要通过PL端转接，QSPI、USB、SMC不适用于PL的EMIO接口。</p>
<p>出去4组32位的GPIO外，对外接口还包括各2组：SPI、I2C、CAN、UART、SD、USB、GigE（Ethernet）。</p>
<h3 id="PL端"><a href="#PL端" class="headerlink" title="PL端"></a>PL端</h3><p>Xilinx FPGA芯片的组成部分：可编程输入输出单元IOB、可配置逻辑块CLB、嵌入式块RAM、布线资源、底层内嵌功能单元、底层内嵌专用硬核等。</p>
<h4 id="IOB"><a href="#IOB" class="headerlink" title="IOB"></a>IOB</h4><p>需要注意，FPGA每个Bank的VCC电压不同，一个Bank仅有一个电压。</p>
<p>I&#x2F;O组被分类为高性能HP（High Performance）和高范围HR（High Range）。</p>
<ul>
<li>HP：VCC为1.8V，常作连接存储器和其他芯片的高速接口</li>
<li>HR：VCC为3.3V，适合各种IO标准</li>
</ul>
<p>HP与HR均支持单端、差分输入，具体可以查阅引脚说明。</p>
<p><strong>每个IOB包括IOSERDER，可作串转并或并转串。</strong></p>
<h4 id="CLB"><a href="#CLB" class="headerlink" title="CLB"></a>CLB</h4><p>CLB指可编程逻辑块，逻辑单元最小规模。Slice片是CLB的子单元。</p>
<p><strong>ZYNQ的片是由4个查找表（LUT）+8触发前+其他逻辑组成的。</strong></p>
<h4 id="BRAM"><a href="#BRAM" class="headerlink" title="BRAM"></a>BRAM</h4><p>嵌入式块RAM，用于生成RAM、ROM、FIFO及移位寄存器等常用的存储模块。</p>
<p>ZYNQ的BRAM由60个存储块组成：</p>
<ul>
<li>每个块RAM由2个18kB的BRAM组成；</li>
<li>以块为单位使用；</li>
<li>3类分组，即BRAM（36kB）；BRAM（18kB）+BRAM（18kB），BRAM+FIFO。由于仅包括1个FIFO Logic，只能生成一组FIFO控制信号。</li>
</ul>
<p><strong>使用块RAM即在片内用小物理空间存储大量数据</strong>。</p>
<h4 id="硬核"><a href="#硬核" class="headerlink" title="硬核"></a>硬核</h4><p>ZYNQPL端内嵌XADC，即两个模数转换器。且有接口可以连接至PS端。</p>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p><em>大梦谁先觉，平生我自知。–《三国演义》</em></p>
</blockquote>
]]></content>
      <categories>
        <category>FPGA</category>
        <category>ZYNQ</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-502错误码与解决办法</title>
    <url>/2025/05/29/Hexo-%E9%83%A8%E7%BD%B2%E9%94%99%E8%AF%AF%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>该博客主要介绍使用Hexo部署博客阶段出现Something Wrong中The requested URL returned error: 502错误码的原因与解决办法。</p>
<span id="more"></span>

<h2 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h2><p>博主在先前使用Hexo部署博文时，直接使用在git bash中使用推送命令<code>$ hexo d</code>即可把当前的文档推送到服务器，并且在线查看。</p>
<p>而本次typora完成文档编辑后生成网页，本地端口预览正常，但部署至github时报错，大致报错信息如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/MicroPrism/MicroPrism.github.io.git/&#x27;: The requested URL returned error: 502</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line"><span class="code">    at ChildProcess.&lt;anonymous&gt; (F:\Blog\MicroPrism\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)</span></span><br><span class="line"><span class="code">    at ChildProcess.emit (node:events:518:28)</span></span><br><span class="line"><span class="code">    at cp.emit (F:\Blog\MicroPrism\node_modules\cross-spawn\lib\enoent.js:34:29)</span></span><br><span class="line"><span class="code">    at ChildProcess._handle.onexit (node:internal/child_process:293:12)</span></span><br></pre></td></tr></table></figure>

<h2 id="场景变化"><a href="#场景变化" class="headerlink" title="场景变化"></a>场景变化</h2><ol>
<li><p>相对于上一次博客推送，本次使用ios手机热点，运营商为中国联通，而上次连接单位的wifi</p>
</li>
<li><p>此次推送博文以html语法插入了图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>			<span class="comment">&lt;!--块级封装--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>	<span class="comment">&lt;!--将图片和文字居中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;dir-name/image-name.png&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">alt</span>=<span class="string">&quot;image can&#x27;t load.&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">style</span>=<span class="string">&quot;zoom:75%&quot;</span>/&gt;</span><span class="comment">&lt;!-- alt内为提示词--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>		<span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line">    title	<span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在此优先将解决办法写在此处，为其他人提供参考。</p>
<ol>
<li><p>根据报错信息，确认与服务器联通状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ping github.com</span><br></pre></td></tr></table></figure>

<p>能ping通说明不是github服务器问题。</p>
</li>
<li><p>尝试使用ssh访问github服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果能访问成功，说明本地密钥和github能匹配，连接异常不是密钥问题。连接正常时显示以下信息：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Hi repo-name! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>3.更改推送时的repo。打开hexo根目录<code>_config.yml</code>文件，更改为下方样式，其中repo-name为自己的仓库名。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:repo-name/repo-name.github.io.git</span> <span class="comment">##更换为ssh推送</span></span><br><span class="line">  <span class="comment">#repo: https://github.com/repo-name/repo-name.github.io.git ##https推送</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>至此，问题解决，有兴趣的可以观察下方的问题分析。</p>
</li>
</ol>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="语法冲突？"><a href="#语法冲突？" class="headerlink" title="语法冲突？"></a>语法冲突？</h3><p>博主首先对问题最直观的定位是<strong>插入图片的语法不统一</strong>导致的异常。相对于大多数网友选择的直接插入的方案，比如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">image name</span>](<span class="link">image-path/image.png</span>)</span><br></pre></td></tr></table></figure>

<p>我选择使用html语法插入，这种语法有几个好处：</p>
<ol>
<li>参数和提示信息更多。比如可以调节图片的位置，center、left、right。或者缩放比例，再或者是图片无法加载的提示信息。</li>
<li>可以加入对图片的解释，对于曲线类的图片，有题注说明会更清晰。</li>
<li>markdown和localhost都可以直接预览。</li>
</ol>
<p>随后到hexo官方查阅<a href="https://hexo.io/zh-cn/docs/troubleshooting">故障排除 | Hexo</a>的资料，搜索关键词“somthing wrong”定位到<strong>模型渲染错误</strong>一节，认为是语法错误，按其意见尝试修改，见下方第1点。同时在网络上搜索使用html语法插入图片的相关问题与解决方案，逐步查找原因：</p>
<ol>
<li>在html语法段加上<code>&#123;&#123;&#125;&#125;</code>，仍然异常。</li>
<li>删除所有html语法，仍然异常。</li>
<li>删除 .md文件名的空格，仍然异常。</li>
</ol>
<p>到此，即可排除是文件名空格、中文字符解析、html语法兼容的问题。<span style="color:red"><strong>后来发现something wrong是很笼统的错误提示，需要向前或向后找更详细的提示。</strong></span></p>
<h3 id="连接异常！"><a href="#连接异常！" class="headerlink" title="连接异常！"></a>连接异常！</h3><p>考虑到hexo推送机制底层还是调用git工具，那么如果出现问题，作为hexo的子集，git应该能获得更多错误信息。果然搜索到类似的帖子，在此进行概括：</p>
<blockquote>
<p>错误代码502意味着网络问题，可能是服务器端关闭或者是访问端的网络波动。首先需要检查你的防火墙、代理、以及网关是否拦截了访问。</p>
</blockquote>
<p>从这段解释里引出了对场景变化的第二个考虑，<strong>网络变化-从单位的网络变为手机热点，可能是运营商拦截？</strong></p>
<p>但是本地却能ping通github。所以<strong>进一步考虑到是否是密钥过期，或者是电脑上的密钥被清理</strong>。（早期github曾使用过短期密钥，因为密钥过期导致无法推送）</p>
<p>随后建立新的密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;you-email@emil.com&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/lenovo/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>

<p>回车保存在默认路径下，覆盖原有文件。使用下方指令copy密钥值粘贴到github端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>新建密钥之后将ssh连接的端口从默认22修改为不常被拦截的443端口，用记事本或者notepad等打开git安装目录下&#x2F;etc&#x2F;ssh&#x2F;ssh_config文件，在末尾加入：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    Hostname ssh.github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    Port 443</span><br></pre></td></tr></table></figure>

<p>重新使用ssh访问github，记得输入yes确认：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>截止到此，ssh访问应该不会出问题了。但是hexo部署仍然有问题，继续查找原因，发现ssh访问没问题的话，<strong>可能出在git端的配置上</strong>。</p>
<p>查找网络资料，发现git可以通过以下两条指令切换https、或者ssh协议：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote set-url origin https://github.com/repo-name/repo-name.github.io.git <span class="comment">##切换https协议</span></span><br><span class="line">$ git remote set-url origin git@github.com:repo-name/repo-name.github.io.git                </span><br></pre></td></tr></table></figure>

<p>类比思考，hexo是将协议集成在了配置文件 <code>_config.yml</code>内，如下方配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:repo-name/repo-name.github.io.git</span> <span class="comment">##更换为ssh推送</span></span><br><span class="line">  <span class="comment">#repo: https://github.com/repo-name/repo-name.github.io.git ##https推送</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>因此，将修改repo参数即可修改deploy时的协议，更换为ssh协议后即推送成功。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【1】<a href="https://hexo.io/zh-cn/docs/troubleshooting">故障排除 | Hexo</a></p>
<p>【2】<a href="https://blog.xihann.top/2024/01/21/hexo-d%E6%8A%A5%E9%94%99%E5%8F%8A%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/">hexo d报错及原因分析 | 惜寒のBlog~</a></p>
<p>【3】<a href="https://www.cnblogs.com/zolich/p/12906838.html#1-%E5%85%88%E7%9C%8B%E7%9C%8B%E6%9C%AC%E5%9C%B0%E6%9C%89%E6%B2%A1%E6%9C%89ssh%E5%AF%86%E9%92%A5">GitHub使用SSH连接以及生成修改添加密钥详细过程 | zolich - 博客园</a></p>
<p>【4】<a href="https://stackoverflow.com/questions/44594353/the-requested-url-returned-error-502-corporate">The requested URL returned error 502, corporate? | Stack overflow</a></p>
<p>【5】<a href="https://blog.csdn.net/2303_79611263/article/details/140346864">解决将Hexo部署到GitHub时报错：Error: Spawn failed_hexo无法部署到github | CSDN博客</a></p>
<p>【6】<a href="https://blog.csdn.net/qq_33316784/article/details/104538400">git相互切换ssh和http协议(一看就懂版)_git 修改 ssh url | CSDN博客</a></p>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p><em>寂寞空庭春欲晚，梨花满地不开门。—— 春怨</em></p>
</blockquote>
]]></content>
      <categories>
        <category>实用工具</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>FPGA-02-Verilog语法</title>
    <url>/2025/05/29/FPGA-02-Verilog%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>本文介绍Verilog HDL基本语法，主要将该代码与类似的C&#x2F;C#语言代码进行对比，根据架构的不同强调表示形式的差异。</p>
<span id="more"></span>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="逻辑值"><a href="#逻辑值" class="headerlink" title="逻辑值"></a>逻辑值</h3><p>FPGA内逻辑值除0、1外新增高阻态Z，表示无驱动。而实际运行中还可能出现亚稳态。</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符用于定义常数、变量、信号、端口、子模块或参数名称，大小写则为不同变量。自定义标识符需要为数字、字母、下划线、$等，且首字母需要为字母或者下划线。</p>
<blockquote>
<p>类似于C语言的关键字，如int、void、const等等。自定义标识符不能与关键字冲突。</p>
</blockquote>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>Verilog中不变的值，分为整形、实型、字符串型。</p>
<p>在表示整形数据时可以有以下几种：</p>
 <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">16</span>    <span class="comment">//位宽32的整数</span></span><br><span class="line"><span class="number">8&#x27;hab</span> <span class="comment">//8位hex值0xab</span></span><br><span class="line"><span class="number">8&#x27;d171</span><span class="comment">//8位dec值171</span></span><br><span class="line"><span class="number">8&#x27;o253</span><span class="comment">//8位oct值0253</span></span><br><span class="line"><span class="number">8&#x27;b101</span><span class="comment">//8位bin值</span></span><br></pre></td></tr></table></figure>

<p><span style="color:red"> 类似于C语言存在整形提升或数据截断，Verilog也存在此种问题。</span></p>
<p>例如，C语言使用<code>uint8_t data_a = 0x123;uint8_t data_b =0x1;</code>定义两个变量，数据类型为8bit位宽，显然前者溢出而后者补足。类比到Verilog中只是修改了表述方式，在赋值时赋予位宽，而且不用按8bit对齐：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">a = <span class="number">8&#x27;h123</span>; <span class="comment">//溢出，随后截断为0x23</span></span><br><span class="line">b = <span class="number">12&#x27;h1</span>;	<span class="comment">//不足，补充为0x001</span></span><br></pre></td></tr></table></figure>

<p>实型数据，说白了就是浮点型，小数，可以采用<code>123.45e2</code>表示数值12345。</p>
<p>字符串指双信号中的字符序列，与C一致，存储的ASCII码值。例如下方字符串同样可以用在verilog内 :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * log_str = <span class="string">&quot;Open log file.&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>Verilog的变量类型基于FPGA的结构基础。FPGA可以抽象成若干门电路，其内部是<strong>电路的连接</strong>，因此定义变量时即分为：</p>
<ul>
<li>线网：<strong>物理电路层面的通路</strong>，wire；</li>
<li>寄存器：<strong>软件层面的变量</strong>，reg；</li>
</ul>
<p>always或initial中被赋值的量数据reg量，assign分配的量属于wire型量。</p>
<blockquote>
<p>C语言最底层的设计最多是操作硬件IO，大多数是存储在堆、栈里的软件量，进行软件层面的运算。Verilog是直接基于电路，搭的是电路，软件量用于进行辅佐运算。</p>
</blockquote>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>此处参数是指module块内部的参数，用于定义状态机的状态、数据位宽和计数器计数个数大小等。例如下方定义的的<code>CNT_MAX</code>：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Parameter CNT_MAX = <span class="number">25&#x27;d24_999_999</span></span><br></pre></td></tr></table></figure>

<p>在实例化模块时可以配置参数：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">counter </span><br><span class="line">#( </span><br><span class="line">    <span class="variable">.CNT_MAX</span> (<span class="number">25&#x27;d24</span> ) <span class="comment">//实例化时参数可修改 </span></span><br><span class="line"> )</span><br><span class="line">counter_inst </span><br><span class="line">(</span><br><span class="line">    <span class="variable">.sys_clk</span> (sys_clk ), <span class="comment">//input sys_clk</span></span><br><span class="line">    <span class="variable">.sys_rst_n</span> (sys_rst_n ), <span class="comment">//input sys_rst_n</span></span><br><span class="line">	<span class="variable">.led_out</span> (led_out ) <span class="comment">//output led_out </span></span><br><span class="line">);          </span><br></pre></td></tr></table></figure>

<p>那么我们可以这么类比C语言，一个module可以当做一个函数，如下：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test(</span><br><span class="line">	<span class="keyword">input</span> a,</span><br><span class="line">    <span class="keyword">inout</span> b,</span><br><span class="line">    <span class="keyword">output</span> c</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>在不管内部如何处理的情况下，其中的输入、输出、输入输出就可以类似为下方的a、b、c，只不过所处的位置不同，修饰也更加直观:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a,<span class="type">int</span> * b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c = a + *b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>此处应当注意，Verliog中包括 <code>=</code>以及<code>&lt;=</code>两种符号。首先思考其底层结构——门电路，搭建的不同的物理电路当然可以执行多个程序流（目前还没学到，暂时这么称呼），也就是常说的<strong>并行逻辑</strong>。</p>
<blockquote>
<p>MCU则是顺序执行逻辑，从上至下，从外至内逐步执行。为了达到类似的并行效果，衍生出了FreeRTOS、uCOSIII等操作系统，频繁切换线程达到并行的假象。</p>
</blockquote>
<p>MCU上有顺序转并行的方案，FPGA上也有类似的顺序执行的模块，比如说每个always块上是一个互相独立的并行块，那么always内部应该可以通过某种方式来达到顺序执行的效果——引出阻塞、非阻塞赋值。</p>
<ul>
<li><p>非阻塞赋值  &lt;&#x3D;</p>
<p>非阻塞赋值不会影响下一个语句的执行。**在某个时刻，一段非阻塞赋值代码是同时执行的，所有代码执行完后再进行赋值操作、刷新结果。**例如下方代码，假设a初值为1：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">a &lt;= a+<span class="number">1</span>;  <span class="comment">//line 1</span></span><br><span class="line">b &lt;= a;	<span class="comment">//line 2</span></span><br></pre></td></tr></table></figure>

<p>那么在运行时，line 1 与 line 2 同时执行，用于运算的a值为1，运行完后<code>a=2，b=1</code>。</p>
</li>
<li><p>阻塞赋值 &#x3D;</p>
<p><strong>阻塞赋值语句按照顺序执行，执行完立即进行赋值操作、刷新结果</strong>，上一句代码会影响下一句的执行。例如：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">a = a + <span class="number">1</span>; <span class="comment">//line 1</span></span><br><span class="line">b = a; 	   <span class="comment">//line 2</span></span><br></pre></td></tr></table></figure>

<p> 上方的代码在运行时，执行完line 1得<code>a = 2</code>，立刻将该值用于下一句代码，得到<code>b=2</code>。</p>
</li>
</ul>
<p>这种思路与C中<code>a++</code>和 <code>++a</code>类似，阻塞就是<code>a++</code>用上一时刻的值进行计算，随后刷新，而非阻塞就是<code>++a</code>，我执行完代码，立刻用新的值进行后续运算。</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li><p>算术运算：<code>+、-、*、/</code></p>
</li>
<li><p>关系运算：<code>&gt;、&lt;、&gt;=、&lt;=</code>，在没有括号的情况下优先进行算术运算。</p>
</li>
<li><p><strong>归约运算&#x2F;位运算</strong>：<code>&amp;、|、^、~&amp;、~|、~^</code></p>
<p>C语言中的位运算符属于双目运算符(C++、C#暂且不说)，而Verilog中可以用于一个变量得出一个bit值，如下：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">&amp;<span class="number">4</span>b&#x27;<span class="number">1010</span> = <span class="number">1</span>&amp;<span class="number">0</span>&amp;<span class="number">1</span>&amp;<span class="number">0</span> = <span class="number">1&#x27;b0</span></span><br></pre></td></tr></table></figure>

<p>如果把1个bit当作一个门的输出，那么一个数据的归约运算当然可以看作多个电路接入一个与或非门。</p>
<p>在Verilog中，双目运算和C基本一致，但是<strong>限定左右参数位宽一致</strong></p>
</li>
<li><p>逻辑运算：<code>&amp;&amp;、||、!=</code>等，不再赘述</p>
</li>
<li><p>移位运算符：<code>&lt;&lt;、&gt;&gt;</code>，逻辑与C基本一致。<strong>但是右操作数如果为x（不定值）或z（高阻），那么运算结果为不定值。</strong></p>
</li>
<li><p>条件运算符：<code>exp1 ? action1 : action2</code>，这个表达式与C一致，多层嵌套时也是就近结合。</p>
</li>
</ul>
<p>运算符的优先级：一元（归约）&gt;二元（算术、移位、关系、等和不等、按位运算）&gt;三元（条件运算）。</p>
<p>其优先级也类似C语言，一般使用<code>()</code>区分。</p>
<ul>
<li>位拼接标识符：<code>&#123;,&#125;</code>，常用来拼接不同位宽的数据，同时可以实现数据右移和左移。</li>
</ul>
<h3 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h3><p>与C语言相同，包括<code>if-else</code> 和<code>case</code> 语句，在此不再赘述。但是需要注意：</p>
<ul>
<li>如果if语句没有else块，可能会在组合逻辑中产生latch</li>
<li>if语句尽量写成多个else if的分支形式，而不建议写成if else  内嵌套if else的语句</li>
</ul>
<h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><p>把该节起名为参数类型的原因是希望参照C语言的函数，划分输入输出的思路。</p>
<p>Verilog的参数类型可以划分为<code>input、output、inout</code>三类，我们可以这么类比：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">input</span> <span class="keyword">wire</span> sel,</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">input</span> <span class="keyword">wire</span> data_out,</span><br><span class="line">        <span class="keyword">inout</span> <span class="keyword">wire</span> data_bus,</span><br><span class="line">        <span class="keyword">output</span> <span class="keyword">wire</span> data_in</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<ul>
<li>sel、data_out: 物理线型输入参数</li>
<li>data_bus: 物理线型可输入可输出参数，例如I2C数据线</li>
<li>data_in: 物理线型输出参数</li>
</ul>
<p>那么显式的对比到C语言中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">uint8_t</span> <span class="title function_">test</span></span><br><span class="line"><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">volatile</span> <span class="type">const</span> <span class="type">uint8_t</span> sel,      <span class="comment">//只能输入</span></span></span><br><span class="line"><span class="params">	<span class="keyword">volatile</span> <span class="type">const</span> <span class="type">uint8_t</span> data_out, <span class="comment">//只能输入</span></span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">    <span class="keyword">volatile</span> <span class="type">uint8_t</span> * data_bus <span class="comment">//可做输入，可修改值</span></span></span><br><span class="line"><span class="params">)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="keyword">return</span> data_in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中的volatile表示易变量。每次从硬件地址重新读取</li>
<li>其中的const显示表示这个量不可被软件层面修改</li>
<li>verilog中若有多个输出，C中可集成在一个结构体中</li>
</ul>
<h2 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h2><p>时间单位与精度</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ns </span><span class="comment">// 单位1ns 精度1ns</span></span><br><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/10ps </span><span class="comment">// 单位1ns 精度10ps，则#10.11表示10.11ns = 10110 ps</span></span><br></pre></td></tr></table></figure>

<p>其中<strong>前者是时间单位，后者是仿真的最小刻度，精度必须小于时间单位。</strong></p>
<h3 id="调试函数"><a href="#调试函数" class="headerlink" title="调试函数"></a>调试函数</h3><p>FPGA里的函数依靠<code>$</code>符号为区分，功能类似C。</p>
<ol>
<li><p>$display 打印信息,打印后自动换行</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$display</span>(<span class="string">&quot;$d+%d=%d&quot;</span>,a,b,c);</span><br><span class="line"><span class="built_in">$display</span>(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>等价于printf，例如printf(“%d”,a);但是$display可以不加格式符，默认为十进制。</p>
<p>这个例子用C#函数来解释就是Console.WriteLine(…);函数</p>
</blockquote>
</li>
<li><p>$write打印信息</p>
<p>用法几乎完全同 <code>$display</code>，但是**<code>write</code>可以使用换行符**</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$write</span>(<span class="string">&quot;%d+%d=%d\n&quot;</span>,a,b,c);</span><br></pre></td></tr></table></figure>
</li>
<li><p>$strobe，格式同$display。<strong>但是该函数是在触发操作后执行的。</strong> 例如下方代码，在 <code>initial</code>块触发最后执行。</p>
<div>
    <center>    <!--将图片和文字居中-->
    <img src="image-20250601142141567.png" alt="image can't load." style="zoom:75%">
    <br>        <!--换行-->
    $strobe代码示意    <!--标题-->
    </center>
</div>

<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">display:<span class="number">0101</span>+xxxx=x</span><br><span class="line">strobe:<span class="number">0101</span>+<span class="number">0110</span>=<span class="number">11</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>$ monitor，持续监测量，使用格式同上方几个函数。但可以理解为C语言中的数据断点，当监测量变发生化时输出调试信息。</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    a = <span class="number">5</span>; <span class="comment">//输出</span></span><br><span class="line">    #<span class="number">100</span>;</span><br><span class="line">    b = <span class="number">6</span>; <span class="comment">//输出</span></span><br><span class="line">    #<span class="number">100</span>;</span><br><span class="line">    c = a + b; <span class="comment">//输出</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">initial</span> <span class="built_in">$monitor</span>(<span class="string">&quot;%d+%d=%d&quot;</span>,a,b,c);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="终止函数"><a href="#终止函数" class="headerlink" title="终止函数"></a>终止函数</h3><ol>
<li>$stop，暂停仿真。可使用modelsim指令或按键继续仿真。</li>
<li>$finish，结束仿真。只可重新开始。</li>
</ol>
<h3 id="配置函数"><a href="#配置函数" class="headerlink" title="配置函数"></a>配置函数</h3><ol>
<li><p>$time，返回64bit<strong>当前仿真时间</strong></p>
</li>
<li><p>$random，产生随机数</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span> #<span class="number">10</span> a = <span class="built_in">$random</span>;</span><br><span class="line"><span class="keyword">initial</span> <span class="built_in">$monitor</span>(<span class="string">&quot;a = %d @time %d&quot;</span>,a,<span class="built_in">$time</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>$readmemb，读取二进制文件</p>
</li>
<li><p>$readmemh，读取十六进制文件</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] a [<span class="number">20</span>:<span class="number">0</span>]; <span class="comment">// 21位位深，8位位宽的数组</span></span><br><span class="line"><span class="comment">//等价于 uint8_t a[21];</span></span><br><span class="line">	<span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="built_in">$readmemb</span>(<span class="string">&quot;text.txt&quot;</span>,a);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;=<span class="number">20</span>; i=i+<span class="number">1</span> ) <span class="keyword">begin</span></span><br><span class="line">           	#<span class="number">10</span>;</span><br><span class="line">            <span class="built_in">$write</span>(<span class="string">&quot;%s&quot;</span>,a[i]);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p><em>与人同行的前提是，你要先在路上。</em></p>
</blockquote>
]]></content>
      <categories>
        <category>FPGA</category>
        <category>Verilog</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>Verilog</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>求职-毕业季校招</title>
    <url>/2025/06/02/%E6%B1%82%E8%81%8C-%E6%AF%95%E4%B8%9A%E5%AD%A3%E6%A0%A1%E6%8B%9B/</url>
    <content><![CDATA[<p>本篇博文主要列举博主在毕业季求职期间的面试与offer情况，包括引申出的有关校招的一些思考…</p>
<p>博文尾部放置近几年的考情分析，以便各位同学了解考研形势。</p>
<span id="more"></span>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本序言写于博主即将毕业之际，落笔之时博主正躺在校医院病床养病。由于身体行动受限，便想趁此机会总结说明下找工作的情况，也希望能传达给希望考研的同学较为准确的就业形势。</p>
<p>在介绍整体形势之前，先简单介绍我个人的经历。博主在研究生阶段主要做嵌入式项目，侧重MCU+RTOS系统上的软件开发，也涉及少量硬件电路、上位机设计。</p>
<p>博主从研三7月开始投递简历，目标岗位是嵌入式软件开发、ARM软件开发等软件研发岗，截止目前，网络投递简历应该有上百份，包括私企、国企、央企、研究所等类型。由于没有做具体的记录，预估面试次数应该有20-30次，拿offer的概率大概有50%。下方举例还能想起来的发offer的公司，待遇皆为税前收入：</p>
<ul>
<li><p>锦浪科技-宁波-光伏新能源-ARM软件开发-约26w-私企。公司待遇很高，岗位也非常对口，但出于行业发展考虑，遂放弃。</p>
</li>
<li><p>奥克斯-宁波-电能事业部-嵌入式软件开发-23.4w-私企。公司待遇一般，集团规模较大，但在25年春季出现裁员潮（可搜索到相关新闻），遂解约。</p>
<p><a href="https://www.toutiao.com/article/7496618081104544256/">奥克斯暴力裁员危机！300名应届生仅剩80人，IPO之路还能走多远？ - 今日头条</a></p>
</li>
<li><p>依爱消防-蚌埠-中电38所子公司-嵌入式软件开发-约12w-国企。主做消防业务，网上了解到加班强度996，综合考虑后待遇较低，放弃。</p>
</li>
<li><p>力源海纳-九江-嵌入式软件研发-约2w&#x2F;月-私企。主做电源业务，和学校内导师有合作，工资在当地属于较高水平，面试时的研发人员确实是懂技术的，但博主不是江西人，综合考虑后放弃。</p>
</li>
<li><p>奇瑞汽车-芜湖-车机部-电控软件开发-9.3k&#x2F;月-私企。面试走过场，待遇低，直接放弃。</p>
</li>
<li><p>中科院空间工程应用中心-北京-集成技术中心-劳务派遣-25w，劳务派遣不适合长期发展，加班强度大，遂放弃。</p>
</li>
<li><p>中铁装备-郑州-嵌入式软件研发-8500&#x2F;月-央企。加班强过996，工资低到难以想象，遂放弃。</p>
</li>
<li><p>中航181-武汉-民机部-软件开发-11k&#x2F;月，年包18w-国企。主营防除冰业务，公积金基数8400，非实际工资，996。综合考虑后解约。</p>
</li>
<li><p>中航隆盛-洛阳-电控部-硬件开发-年包15w-国企&#x2F;中航613所子公司。公司主营电源业务，加班强度低，基本保证双休，所在城市消费水平适中，宜居，遂签约。</p>
</li>
</ul>
<p>以下还有一些面试了但夭折的公司，同样在此举例：</p>
<ul>
<li>许继集团-许昌-控制科学与工程16w&#x2F;电子信息18w-央企。对博主而言属于最优选，当时博主是线上面试，可能线下招聘名额满&#x2F;或者博主能力不行。公司很多分部家在附近，希望躺平的可以考虑。</li>
<li>格力-珠海-电控软件，不清楚原因</li>
<li>海康-武汉-智能硬件，项目不对口，没有Linux和网络通信基础</li>
<li>睿能-深圳-嵌入式软件，手上拿的有其他offer，给不到更高价格</li>
<li>汉德车桥-西安-电控软件，面试迟到、忘带简历 …,直接被pass</li>
</ul>
<p>时间跨度较长，面试机会也并不多，简单列举这么多公司。此外还包括一些给了面试机会，但是网上搜索相关信息后发现裁员、工作环境差、工资低等情况直接放弃的，还有一些压根没有给面试机会的：</p>
<ul>
<li>禾赛科技-简历挂</li>
<li>东风汽车-简历挂</li>
<li>中科曙光-简历挂</li>
<li>联合光电-简历挂</li>
<li>汇川技术-卡双2</li>
<li>科华数据-简历挂</li>
<li>一汽集团-简历挂</li>
<li>久之洋-简历挂（武汉，年薪22.4，996，秋招早期可捡漏）</li>
<li>国仪量子-简历挂</li>
<li>比亚迪-卡双2</li>
<li>阳光电源-卡双2</li>
<li>江铃汽车-卡双2（今年南昌大学只招了我室友1个，仿真岗）</li>
<li>洪都航空-卡双2</li>
<li>联想-简历挂</li>
<li>九州集团-无消息</li>
<li>中联重科-简历挂</li>
<li>长鑫存储-简历挂</li>
<li>台达电子-无消息</li>
<li>华中数控-无消息</li>
<li>美的-简历挂</li>
<li>牧原-放弃</li>
<li>中车株洲-放弃</li>
<li>中车四方-无面试机会</li>
<li>中船、中电、中航研究所 -无面试机会</li>
<li>地方实验室、研究院-无面试机会</li>
<li>…</li>
</ul>
<p>回顾找工作的经历，投递的单位类型不明确，私企国企混杂，另一方面也确实高估了自己的学历和能力，没想到本科能进的单位研究生却进不去了。</p>
<p><strong>根据我粗浅的面试经验，央企似乎并不看重你的实习经历，反而更注意你的高考、考研成绩，工作意向的稳定程度，家庭情况。而技术研发型的国企，则看重你意向是否稳定程度，同时考量项目里的技术能力，有实习和项目（项目完整，尽管和公司业务可能不完全对口）就很容易拿到offer。私企更侧重于你的技术能力，项目对口程度，有实习是非常大的加分项，更容易拿到offer。</strong></p>
<p>25年对比前几年的就业上的差别比较明显，比如江西省洪都航空（18w）、江铃（13w）两个国企要求双2学历，但工资对比同样要求双2的比亚迪（24w）少不少。再比如我所签约的公司，两年前双非硕士即可签约研发岗，25年要求本科学校为本科一批、硕士为92，否则只给劳务派遣岗位。</p>
<p><strong>利用身边统计法（纯主观）做个总结：</strong></p>
<ul>
<li>双2的同学所签约的公司规模、收入待遇远高于单2，面试机会也更多。</li>
<li>单2学历就各凭本事，谁的项目、实习多，谁的面试机会就更多。谁做的工作更多、技术功底更劳，签约的单位也更好。</li>
<li>有很多同学拿私企嵌入式软件研发岗用来保底，其次是硬件研发，最后是FPGA开发。有关Linux驱动、IC验证、机器人仿真等我不了解，也没有关注。还有个别同学考入电厂、当高中老师、读博，此处不再讨论。</li>
</ul>
<p>南昌大学控制专业有相当一部分导师的研究方向是深度学习、神经网络等，此类方向其实在找工作上可投递的岗位有限，算法岗可能要求双9学历。所以有部分同学在私下完成毕业设计的同时，自学嵌软相关知识、参加短期实习，秋招春招再找嵌入式相关工作，可能最终签约的工作不是特别满意，但是不至于失业。</p>
<p>B站上的开源项目、项目教程学一些已经足够通过私企的线下面试，因为私企的岗位需求高、数量多，<strong>可能每年辞职的人也更多</strong>，像格力、比亚迪、华勤、欧菲光、奥克斯已经算是来南昌大学校招的较好的企业了，各位也可以自行斟酌校招情况。</p>
<p>当然，为了找到心仪的工作，包括我在内的一些同学选择线上投递简历，海面对比待遇后再考虑签约。好处是有机会捡漏到“小而美”的955双休的企业，也有机会找到“实际要求更高”的企业，比如我的双一流硕的朋友在秋招初期拿到了武汉中船久之洋的国企offer，待遇22.4w&#x2F;年，随后我去投递简历，但却没有面试机会。这么看，找工作似乎还需要一些天时、地利、人和…</p>
<p>另外，面试实在太费精力，也要做出取舍。提前考虑自己想过什么样的生活，996拿高薪或者955躺平，选择不同的工作在短期内会得到不同的生活。另外建议做好背景调查，有些公司裁应届生、有些入职后降薪、有些996猛猛加班…在此推荐几个消息渠道：</p>
<ul>
<li><a href="https://www.nowcoder.com/">牛客网 </a>，有内推，有面经，有晒薪资的</li>
<li>offershow微信小程序，主要是薪资讨论</li>
<li><a href="https://www.xiaohongshu.com/explore">小红书 </a>，发帖提问可能有人回复</li>
<li><a href="https://tieba.baidu.com/">百度贴吧</a>，有些陈年老帖会有蛛丝马际</li>
<li><a href="https://www.zhihu.com/">知乎</a>，可信度不高，基本上每个公司都被骂…需要自行分辨</li>
</ul>
<p>由于博主的见闻粗浅，能力尚微，因此本篇序言所写内容可能非常啰嗦，也非常主观。有时候我自己也会迷茫，读研到底是不是一个正确的选择？因为相对3年前，硕士学历已经贬值太多，学历门槛越来越高。我也不知道3年后的硕士就业会更差？或者更好？</p>
<p>行文至此，希望能给各位准备考研或者即将毕业的同学一点思考，也祝愿各位能得偿所愿，奔向理想前程。</p>
<p align="right">2025年6月2日</p>

<h2 id="考研形势"><a href="#考研形势" class="headerlink" title="考研形势"></a>考研形势</h2><p>考研笔记内使用大量胡寿松自动控制原理的题目，在询问DeepSeek后被告知公开传播电子笔记可能涉及侵权行为，因此电子笔记的公开计划暂时搁置…</p>
<p>整理的考情如下：</p>
<div class="pdf-container" data-target="NCU873.pdf" data-height="1000px"></div>



<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p>寒来暑往，来日方长。</p>
</blockquote>
]]></content>
      <categories>
        <category>求职</category>
        <category>校招</category>
      </categories>
      <tags>
        <tag>校招</tag>
        <tag>就业形势</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next主题嵌入pdf显示</title>
    <url>/2025/06/04/Hexo-Next%E4%B8%BB%E9%A2%98%E5%B5%8C%E5%85%A5pdf%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>本文介绍在使用Hexo Next主题搭建个人博客时使用PDF.js工具嵌入显示pdf文件的解决方案，便于进行手机和电脑双端在线浏览。</p>
<span id="more"></span>

<h2 id="博文目的"><a href="#博文目的" class="headerlink" title="博文目的"></a>博文目的</h2><p>博主在使用Hexo的过程中发现除去可以插入图像文件外，还可以插入pdf文件进行在线预览。类似以下样例，一个网页内插入了一个方框显示pdf内容：</p>
<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250604084524431.png" alt="image can't load." style="zoom:75%"><!-- alt内为提示词-->
    <br>		<!--换行-->
    PDF预览(参考资料1)	<!--标题-->
    </center>
</div>


<p>因此博主预期在Next主题下实现类似功能。</p>
<h2 id="方案验证"><a href="#方案验证" class="headerlink" title="方案验证"></a>方案验证</h2><h3 id="hexo-pdf插件"><a href="#hexo-pdf插件" class="headerlink" title="hexo-pdf插件"></a>hexo-pdf插件</h3><p>通过搜索其他人搭建个人博客的经验，部分作者使用<code>hexo-pdf</code>插件用于显示pdf文件，尝试该方案。</p>
<ul>
<li><p>在博文根目录下安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-pdf</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>source</code>文件夹内创建pdf文件夹，在<code>.md</code>文档内插入以下语句。</p>
<p><strong>此方式在本地生成后弹出了IDM文件下载链接，未出现预览窗口，如下图。如果显示<code>Cannot GET /2025/06/04/Test.pdf</code>说明文件路径有问题</strong></p>
 <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pdf  /pdf/Test.pdf %&#125;</span><br></pre></td></tr></table></figure>

<div>            <!--块级封装-->
    <center>    <!--将图片和文字居中-->
    <img src="image-20250604091556759.png" alt="image can't load." style="zoom:75%"><!-- alt内为提示词-->
    <br>        <!--换行-->
    弹出下载界面，无预览    <!--标题-->
    </center>
</div>


</li>
<li><p>尝试更改文件夹，在<code>_post</code>文件夹下创建与<code>.md</code>同名的文件夹 ，在<code>.md</code>文档内插入以下两句语句。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pdf ./Test.pdf %&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pdf  Test.pdf %&#125;</span><br></pre></td></tr></table></figure>

<p>结果与第2步放入<code>source</code>文件夹类似，本地预览弹出文件下载框，但是无法加载出内容。</p>
<p>该方案推送至Github后可正常浏览，效果如下：</p>
<div class="pdf-container" data-target="Test.pdf" data-height="600px"></div></li>
</ul>
<p><strong>缺点：该方案只能在部署到服务器后在PC端预览，手机端查看博文则会显示文件丢失。也无法在本地生成后查看效果。</strong></p>
<h3 id="PDF-js工具"><a href="#PDF-js工具" class="headerlink" title="PDF.js工具"></a>PDF.js工具</h3><p>有很多博主在个人博客使用这个pdf工具，但多数应用主题是butterfly或者fluid主题，博主希望尝试应用在next主题上，便于在手机与电脑端实现双端浏览。</p>
<ol>
<li><p><a href="https://mozilla.github.io/pdf.js/getting_started/#download">下载PDF.js</a>工具包，博主选择下载modern browsers v5.3.31版本</p>
</li>
<li><p>在next主题\source下建立一个文件夹pdfjs，存放解压文件</p>
</li>
<li><p>在博客根目录的 <code>_config.yml</code>文件中设置，取消渲染</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">pdfjs/**/*</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用以下代码插入pdf，效果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;/pdfjs/pdfjs/web/viewer.html?file=https://MicroPrism.github.io/2025/06/04/Hexo-Next主题嵌入pdf显示/Test.pdf&quot;</span> 		</span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">&quot;750&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<iframe src="/pdfjs/pdfjs/web/viewer.html?file=https://MicroPrism.github.io/2025/06/04/Hexo-Next主题嵌入pdf显示/Test.pdf" width="100%" height="750" frameborder="0">
</iframe></li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://awesomeyouthzhang.github.io/2020/02/05/hexo%20%E4%B8%AD%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5pdf%E6%8F%92%E4%BB%B6/">hexo 中如何插入pdf | 智贤</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/550626417">hexo中插入PDF |知乎</a></li>
<li><a href="https://www.poetyin.com/posts/4a17b156/">The Details Usage of the Hexo Next-Theme Plugin <code>next-pdf</code> | Poetry Continent</a></li>
<li><a href="https://jiqiren116.github.io/2024/03/24/hexo%E5%8D%9A%E5%AE%A2%E6%98%BE%E7%A4%BApdf/">hexo博客显示pdf | robot-x Blog</a></li>
<li><a href="https://www.bilibili.com/opus/771629864647131138">Hexo内嵌PDF.js | 哔哩哔哩</a></li>
</ol>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p>有情芍药含春泪，无力蔷薇卧晓枝。– 春日</p>
</blockquote>
]]></content>
      <categories>
        <category>实用工具</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>pdf预览</tag>
      </tags>
  </entry>
</search>
