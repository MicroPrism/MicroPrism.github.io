<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo-博客搭建、问题与解决办法</title>
    <url>/2025/04/09/Hexo-MyBlog/</url>
    <content><![CDATA[<p>该博客主要介绍使用Hexo工具在Github上搭建Next主题个人博客的简要过程，列举所参考的视频与帖子连接，同时汇总个人搭建过程中遇到的各种错误和解决办法。</p>
<span id="more"></span>

<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p>博客搭建所使用的部件如下：</p>
<ul>
<li>Github：用于博客线上浏览</li>
<li>Git: 线上推送工具</li>
<li>Hexo：用于管理本地博客内容、主题与线上推送</li>
<li>Sublime Text：用于管理博客文件夹，无需来回跳转</li>
</ul>
<p>博客搭建所用的参考视频为：</p>
<p>【1】<a href="https://www.bilibili.com/video/BV1cW411A7Jx/?spm_id_from=333.337.top_right_bar_window_history.content.click&vd_source=5465b0f4790ebae45362caa6519f3b79">hojun_cn|手把手教你搭建属于自己的hexo+github博客-BiliBili</a></p>
<p>博客美化参考的教程如下：</p>
<p>【1】<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">Hexo-NexT</a></p>
<p>【2】<a href="https://vic.kim/2019/05/25/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">Hexo博客优化之Next主题美化 | Vicの博客</a></p>
<p>【3】<a href="https://xiamu-ssr.github.io/Hexo/2024/06/19/2024-H1/2024-06-19-12-31-52/">如何优雅的使用Github Action服务来将Hexo部署到Github Pages - Hexo</a></p>
<p>【4】<a href="https://github.com/theme-next/theme-next-canvas-nest/blob/master/README.md">Hexo v7.0+的canvas-nest插件配置-Github</a></p>
<p>【5.1】<a href="https://blog.csdn.net/Aoman_Hao/article/details/89416634">Hexo博客Next主题建立标签云-CSDN博客</a></p>
<p>【5.2】<a href="https://github.com/D0n9X1n/hexo-tag-cloud/blob/master/README.ZH.md">Hexo的hexo-tag-cloud插件使用手册-Github</a></p>
<p>【6】<a href="https://blog.csdn.net/kantaiyang/article/details/129159055">Hexo无法显示本地图片的问题-CSDN博客</a></p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>Hexo创建本地博客仓库后，使用<strong>控制台</strong>或<strong>Git Bash Here</strong>输入指令进行博文管理，详见<a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a>，以下简要介绍常用指令</p>
<ol>
<li><p>网站生成–生成本地网站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
</li>
<li><p>网站推送–推送至github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建本地端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s -p 5555</span><br></pre></td></tr></table></figure>

<p>该指令将创建本地5555端口，可在浏览器中输入<code>localhost:5555</code>进行查看，但并未推送至线上。</p>
</li>
</ol>
<h2 id="问题与解决办法"><a href="#问题与解决办法" class="headerlink" title="问题与解决办法"></a>问题与解决办法</h2><p>虽然有视频参考，但作者在使用时仍然出现一些问题，在此记录，希望对各位有所帮助。</p>
<h3 id="本地仓库初始化失败"><a href="#本地仓库初始化失败" class="headerlink" title="本地仓库初始化失败"></a>本地仓库初始化失败</h3><p><strong>原因1：在Github创建仓库时的仓库名与本地仓库名不一致。</strong></p>
<p>举个栗子：作者在Github的仓库名为<code>AAA</code>，那么使用<code>hexo init AAA</code>指令时的本地仓库路径应该为<code>C:\Blog</code>，文件夹名称为<code>AAA</code>。</p>
<p><strong>原因2：无法在某个硬盘的根目录下创建仓库。例如在<code>C:</code>文件夹下初始化将失败。</strong></p>
<p>举个栗子：在本地文件夹下应该创建子文件夹，如<code>C:\Blog</code>或者你喜欢的其他名称。</p>
<p><strong>原因3：SSL证书报错，如下。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init AAA</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/hexojs/hexo-starter.git/&#x27;</span>: SSL certificate problem: unable to get <span class="built_in">local</span> issuer certificate</span><br><span class="line">WARN  git <span class="built_in">clone</span> failed. Copying data instead</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>

<p>解决办法：首先下载最新版本Git，某些旧版本可能会失败。其次，Git在下载后默认为Linux终端加密，使用以下指令修改配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global http.sslbackend schannel</span><br></pre></td></tr></table></figure>

<p><span style="color:red"><strong>不建议使用以下指令：该指令关闭安全检查，可能会受到外部攻击。</strong></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<h3 id="更改主题后生成时报错"><a href="#更改主题后生成时报错" class="headerlink" title="更改主题后生成时报错"></a>更改主题后生成时报错</h3><p>此时进行本地查看，网页端将显示空白界面。生成阶段的报错信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARN  No layout: 2025/04/09/hello-world/index.html</span><br><span class="line">WARN  No layout: archives/index.html</span><br><span class="line">WARN  No layout: archives/2025/index.html</span><br><span class="line">WARN  No layout: archives/2025/04/index.html</span><br><span class="line">WARN  No layout: index.html</span><br></pre></td></tr></table></figure>

<p>原因1：主题包名称与<code>_config.yml</code>中不一致，检查文件名。</p>
<p>举个例子：作者使用<code>next</code>主题，在github上下载的主题包名称为<code>xxxx_next_xxx</code>形式。将主题包与<code>_config.yml</code>中修改为<code>next</code>或其他相同的名称即可。</p>
<p>原因2：原有缓存内容未更新。使用以下指令重新生成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>

<h3 id="无法推送至Github仓库"><a href="#无法推送至Github仓库" class="headerlink" title="无法推送至Github仓库"></a>无法推送至Github仓库</h3><p>原因1：仓库分支名有误。Github默认仓库名曾由<code>master</code>修改为<code>mian</code>， 但Hexo默认分支为<code>master</code>。</p>
<p>解决办法：在<code>_config.yml</code>内找到<code>branch </code>分支，并修改为<code>main</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">	<span class="string">type:git</span></span><br><span class="line">	<span class="string">repo:xxx</span> <span class="comment">#你的Github仓库</span></span><br><span class="line">	<span class="string">branch：main</span></span><br></pre></td></tr></table></figure>



<h3 id="新增侧边栏项目后出错"><a href="#新增侧边栏项目后出错" class="headerlink" title="新增侧边栏项目后出错"></a>新增侧边栏项目后出错</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">YAMLException: can not <span class="built_in">read</span> a block mapping entry; a multiline key may not be an implicit key (4:1)</span><br></pre></td></tr></table></figure>

<p>原因1：文件的<code>front-matter</code>内存在中英文字符混用。</p>
<p>解决办法：使用英文字符，并且后跟空格。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 关于</span><br><span class="line"><span class="built_in">date</span>: 2025-04-16 13:20:26</span><br><span class="line">tags: about</span><br></pre></td></tr></table></figure>



<h3 id="创建新标签后访问错误"><a href="#创建新标签后访问错误" class="headerlink" title="创建新标签后访问错误"></a>创建新标签后访问错误</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Cannot GET /about/</span><br></pre></td></tr></table></figure>

<p>原因1：可能并未创建对应的文件夹，或者文件名称有误。</p>
<p>解决办法：new page创建新文件夹，文件夹内的文件名<strong>必须为<code>index.md</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure>

<p>并且注意，此时需要更改内部的tags，比如</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 关于</span><br><span class="line"><span class="built_in">date</span>: 2025-04-16 13:20:26</span><br><span class="line">tags: about</span><br></pre></td></tr></table></figure>

<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h3 id="博客分类"><a href="#博客分类" class="headerlink" title="博客分类"></a>博客分类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure>

<p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p>
<h3 id="修改分类间隔符"><a href="#修改分类间隔符" class="headerlink" title="修改分类间隔符"></a>修改分类间隔符</h3><p>如果希望保留多语言支持，可以修改翻译文件中的 <code>symbol.comma</code> 定义：</p>
<ol>
<li><p>找到主题的语言文件（如中文）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">themes/next/languages/zh-CN.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>symbol.comma</code> 的值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">symbol:</span><br><span class="line">  comma: <span class="string">&quot; / &quot;</span>  <span class="comment"># 将逗号改为斜杠</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p><em>且视他人之疑目如盏盏鬼火，大胆地去走你的夜路。–史铁生 《病隙随笔》</em></p>
</blockquote>
]]></content>
      <categories>
        <category>实用工具</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>SpaceDesk-Win与iPad有线副屏扩展与常见问题</title>
    <url>/2025/04/19/SpaceDesk-SecondaryScreen/</url>
    <content><![CDATA[<p>Win与平板在同一无线网络下，很容易实现无线连接，但无线延迟较高、设备易发热。有线连接延迟低、帧率高，这篇博客可以让闲置的iPad来跳“最后一舞”，前提是有一个正在吃灰的iPad…</p>
<span id="more"></span>

<h2 id="设备说明"><a href="#设备说明" class="headerlink" title="设备说明"></a>设备说明</h2><ul>
<li>Windows 11,	Type-C</li>
<li>iPad Air4，	Type-C</li>
<li>iPad原装双端Type-C数据线</li>
</ul>
<h2 id="软件说明"><a href="#软件说明" class="headerlink" title="软件说明"></a>软件说明</h2><h3 id="Win端"><a href="#Win端" class="headerlink" title="Win端"></a>Win端</h3><ol>
<li><p>下载安装SpaceDesk</p>
<p>SpaceDesk官网：<a href="https://www.spacedesk.net/download/#server-driver">最新版本 点击下载</a></p>
<p>百度网盘：<a href="https://pan.baidu.com/s/18-q_8Ee8a7pfuRcNfBlofw?pwd=8eis">v2.1.15 点击下载</a></p>
</li>
<li><p>下载安装iTunes</p>
<p>打开Win自带的微软商店，搜索下载。</p>
<p><img src="image-20250419103753851.png" alt="image-20250419103753851"></p>
<p>疑似v2.1.15 版本的SpaceDesk不具备iPad连接的驱动，需要使用iTunes连接1次，后续就不再使用。</p>
</li>
</ol>
<h3 id="iPad-端"><a href="#iPad-端" class="headerlink" title="iPad 端"></a>iPad 端</h3><p>App Store 搜索spacedesk下载。</p>
<p><img src="image-20250419104020718.png" alt="image-20250419104020718"></p>
<p>安装完成后打开软件，设置最高画质、自动旋转、自动改变IP等，iPad端无需其他操作。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="黑白显示"><a href="#黑白显示" class="headerlink" title="黑白显示"></a>黑白显示</h3><p>原因：SpaceDesk并非是最新版本。下载官网最新版本。</p>
<h3 id="连接Type-c无反应"><a href="#连接Type-c无反应" class="headerlink" title="连接Type-c无反应"></a>连接Type-c无反应</h3><p>原因：汉化包Bug。</p>
<p>打开安装包，Remove当前安装版本，重新安装，不要打汉化</p>
<h3 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h3><p>【1】<a href="https://blog.csdn.net/qq_42013947/article/details/136596644?ops_request_misc=&request_id=&biz_id=102&utm_term=LXHYouth&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-136596644.142%5Ev102%5Epc_search_result_base6&spm=1018.2226.3001.4187">LXHYouth|使用SpaceDesk实现iPad成为电脑拓展屏(保姆级教程)-CSDN博客</a></p>
<p>【2】<a href="https://www.bilibili.com/video/BV1NQ4y1A7PD/?share_source=copy_web&vd_source=793e603d878f9531350764468aa132ce">我想当饼藏|ipad作为副屏与Windows电脑有线连接-哔哩哔哩</a></p>
<p>【3】<a href="https://www.bilibili.com/opus/912838630992510994?spm_id_from=333.1387.0.0">咸鱼羊同学|Windows与iPad有线副屏SpaceDesk扩展与常见问题 - 哔哩哔哩</a></p>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p><em>他山之石，可以攻玉。–《诗·小雅·鹤鸣》</em></p>
</blockquote>
]]></content>
      <categories>
        <category>实用工具</category>
        <category>SpaceDesk</category>
      </categories>
      <tags>
        <tag>iPad副屏</tag>
        <tag>有线连接</tag>
      </tags>
  </entry>
  <entry>
    <title>FPGA-01-关于ZYNQ</title>
    <url>/2025/04/20/FPGA-01-About_ZYNQ/</url>
    <content><![CDATA[<p>该博文介绍FPGA的相关基础知识，如制造厂商、主要功能等。</p>
<span id="more"></span>

<h2 id="PLD器件"><a href="#PLD器件" class="headerlink" title="PLD器件"></a>PLD器件</h2><p>FPGA: Field Programmable Gate Array，即现场可编程门阵列，属于可编程器件PLD（Programmable Logic Device），类似的有PLA、PAL、CPLD等器件。</p>
<h3 id="PLA与PROM"><a href="#PLA与PROM" class="headerlink" title="PLA与PROM"></a>PLA与PROM</h3><p>PLA与PROM为早期反熔丝型PLD电路。PLA（Programmable Logic array）中通过与门、非门构成“与平面”，“或平面”，以及一次性的编程矩阵。</p>
<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420205204194.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    PLA内部结构	<!--标题-->
    </center>
</div>
可编程只读存储器PROM（Programmable Read-Only Memory）与PLA类似，均是通过“与连接矩阵与“或连接矩阵”组成，**但是PROM的结构上与连接矩阵固定，仅"或矩阵"可进行一次编程**，如下图。

<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420210628775.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    PROM内部结构	<!--标题-->
    </center>
</div>

<h3 id="PAL与GAL"><a href="#PAL与GAL" class="headerlink" title="PAL与GAL"></a>PAL与GAL</h3><p>在PLA与PROM的基础上又延伸出其他两种类型，即PAL（Programmable Array Logic）和GAL（Generic Array Logic）。</p>
<p>其中PAL相对于PROM结构类似，只是<strong>PAL是仅”与连接矩阵”可编程</strong>，仍然为反熔丝工艺，仅可编程1次。</p>
<p>PAL根据输出电路工作模式可分为三类：</p>
<ul>
<li>三态输出</li>
<li>寄存器输出</li>
<li>互补输出</li>
</ul>
<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420211339732.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    PAL内部结构	<!--标题-->
    </center>
</div>

<p>GAL相对于PAL改进：</p>
<ul>
<li>CMOS工艺，电可擦除，可多次编程</li>
<li>可编程的输出逻辑宏单元OLMC（Output Logic Macro Cell）</li>
</ul>
<p>其中OLMC可通过编程控制GAL输出，覆盖PAL的三种模式。</p>
<h3 id="CPLD与FPGA"><a href="#CPLD与FPGA" class="headerlink" title="CPLD与FPGA"></a>CPLD与FPGA</h3><p>复杂可编程逻辑器件CPLD（Complex Programmable Logic Device）可以看作若干PLA与可编程连接矩阵的集合。内部结构如图。</p>
<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420215617600.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    CPLD内部结构	<!--标题-->
    </center>
</div>

<p>FPGA内大量使用LUT查找表和寄存器，可分为SRAM、反熔丝、Flash三种类型，包括可编程的：</p>
<ul>
<li>逻辑块</li>
<li>布线资源</li>
<li>IO口</li>
</ul>
<div>			<!--块级封装-->
    <center>	<!--将图片和文字居中-->
    <img src="image-20250420204136714.png" alt="image can't load." style="zoom:75%">
    <br>		<!--换行-->
    FPGA与CPLD对比	<!--标题-->
    </center>
</div>

<p>FPGA的应用场景对比单片机和ARM，主要优势9是灵活高效、高吞吐量、低批量延时、快速并行运算、可重构、可重复编程、可实现定制性能和定制功耗。</p>
<h2 id="ZYNQ"><a href="#ZYNQ" class="headerlink" title="ZYNQ"></a>ZYNQ</h2><p>Xilinx内的ZYNQ系列芯片内包括一块Cortex-A9的硬件ARM处理器，称为为PS。其余的逻辑部分，称为PL，PL上可以使用逻辑块搭载MicroBlaze软核处理器。</p>
<h3 id="PS-端"><a href="#PS-端" class="headerlink" title="PS 端"></a>PS 端</h3><p>ZYNQ内除去ARM外，还包括应用处理单元APU（Application Processing Unit）、扩展外设、cache存储器、存储器接口、互联接口、时钟发生电路。</p>
<h4 id="APU"><a href="#APU" class="headerlink" title="APU"></a>APU</h4><div>
    <center>
        <img src="image-20250425103918783.png" alt="image can't load." style="zoom:75%">
        <br>
    <center>
      APU框架
</center></center></div>

<ul>
<li>双ARM核、NEONTM媒体处理引擎MPE（Media Processing Engine）、浮点计算单元FPU（Floating Point Unit）、内存管理单元MMU（Memory Management Unit）、一级cache存储器（指令+数据）</li>
<li>一致性控制单元SCU（Snoop Control Unit）：ARM与OCM和二级cache之间的连接桥。可用加速一致端口ACP（Accelerator Coherency Port）管理PS与PL的访问</li>
<li>二级cache、片上存储器OCM（On Chip Memory），包括256kB的RAM和128kB的BootRAM。</li>
</ul>
<h4 id="存储器接口"><a href="#存储器接口" class="headerlink" title="存储器接口"></a>存储器接口</h4><p>ZYNQ-7000系列存储器接口包括动态+静态口。</p>
<ul>
<li><p>动态存储器控制器</p>
<ol>
<li>核心存储控制器和调度器DDRC</li>
<li>AXI存储器端口接口DDRI</li>
<li>数字PHY及控制器DDBP，可用于DDR2&#x2F;3、DDR3L、LPDDR2</li>
</ol>
</li>
<li><p>静态存储控制器</p>
<p>SMC（Static Memory Controller），可用作NAND闪存控制器、或并口存储器控制器，支持NAND闪存、NOR闪存、异步SRAM。</p>
</li>
<li><p>QSPI</p>
<p>程序烧录，程序固化。</p>
</li>
</ul>
<h4 id="外部接口"><a href="#外部接口" class="headerlink" title="外部接口"></a>外部接口</h4><p>PS和外部通信主要通过复用的输入&#x2F;输出MIO（Multiplexed Input&#x2F;Output，MIO）实现，直接连接在PS端。但扩展的MIO即EMIO需要通过PL端转接，QSPI、USB、SMC不适用于PL的EMIO接口。</p>
<p>出去4组32位的GPIO外，对外接口还包括各2组：SPI、I2C、CAN、UART、SD、USB、GigE（Ethernet）。</p>
<h3 id="PL端"><a href="#PL端" class="headerlink" title="PL端"></a>PL端</h3><p>Xilinx FPGA芯片的组成部分：可编程输入输出单元IOB、可配置逻辑块CLB、嵌入式块RAM、布线资源、底层内嵌功能单元、底层内嵌专用硬核等。</p>
<h4 id="IOB"><a href="#IOB" class="headerlink" title="IOB"></a>IOB</h4><p>需要注意，FPGA每个Bank的VCC电压不同，一个Bank仅有一个电压。</p>
<p>I&#x2F;O组被分类为高性能HP（High Performance）和高范围HR（High Range）。</p>
<ul>
<li>HP：VCC为1.8V，常作连接存储器和其他芯片的高速接口</li>
<li>HR：VCC为3.3V，适合各种IO标准</li>
</ul>
<p>HP与HR均支持单端、差分输入，具体可以查阅引脚说明。</p>
<p><strong>每个IOB包括IOSERDER，可作串转并或并转串。</strong></p>
<h4 id="CLB"><a href="#CLB" class="headerlink" title="CLB"></a>CLB</h4><p>CLB指可编程逻辑块，逻辑单元最小规模。Slice片是CLB的子单元。</p>
<p><strong>ZYNQ的片是由4个查找表（LUT）+8触发前+其他逻辑组成的。</strong></p>
<h4 id="BRAM"><a href="#BRAM" class="headerlink" title="BRAM"></a>BRAM</h4><p>嵌入式块RAM，用于生成RAM、ROM、FIFO及移位寄存器等常用的存储模块。</p>
<p>ZYNQ的BRAM由60个存储块组成：</p>
<ul>
<li>每个块RAM由2个18kB的BRAM组成；</li>
<li>以块为单位使用；</li>
<li>3类分组，即BRAM（36kB）；BRAM（18kB）+BRAM（18kB），BRAM+FIFO。由于仅包括1个FIFO Logic，只能生成一组FIFO控制信号。</li>
</ul>
<p><strong>使用块RAM即在片内用小物理空间存储大量数据</strong>。</p>
<h4 id="硬核"><a href="#硬核" class="headerlink" title="硬核"></a>硬核</h4><p>ZYNQPL端内嵌XADC，即两个模数转换器。且有接口可以连接至PS端。</p>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p><em>大梦谁先觉，平生我自知。–《三国演义》</em></p>
</blockquote>
]]></content>
      <categories>
        <category>FPGA</category>
        <category>ZYNQ</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>ZYNQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-502错误码与解决办法</title>
    <url>/2025/05/28/Hexo-%E9%83%A8%E7%BD%B2%E9%94%99%E8%AF%AF%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>该博客主要介绍使用Hexo部署博客阶段出现Something Wrong中The requested URL returned error: 502错误码的原因与解决办法。</p>
<span id="more"></span>

<h2 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h2><p>博主在先前使用Hexo部署博文时，直接使用在git bash中使用推送命令<code>$ hexo d</code>即可把当前的文档推送到服务器，并且在线查看。</p>
<p>而本次typora完成文档编辑后生成网页，本地端口预览正常，但部署至github时报错，大致报错信息如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/MicroPrism/MicroPrism.github.io.git/&#x27;: The requested URL returned error: 502</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line"><span class="code">    at ChildProcess.&lt;anonymous&gt; (F:\Blog\MicroPrism\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)</span></span><br><span class="line"><span class="code">    at ChildProcess.emit (node:events:518:28)</span></span><br><span class="line"><span class="code">    at cp.emit (F:\Blog\MicroPrism\node_modules\cross-spawn\lib\enoent.js:34:29)</span></span><br><span class="line"><span class="code">    at ChildProcess._handle.onexit (node:internal/child_process:293:12)</span></span><br></pre></td></tr></table></figure>

<h2 id="场景变化"><a href="#场景变化" class="headerlink" title="场景变化"></a>场景变化</h2><ol>
<li><p>相对于上一次博客推送，本次使用ios手机热点，运营商为中国联通，而上次连接单位的wifi</p>
</li>
<li><p>此次推送博文以html语法插入了图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>			<span class="comment">&lt;!--块级封装--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>	<span class="comment">&lt;!--将图片和文字居中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;dir-name/image-name.png&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">alt</span>=<span class="string">&quot;image can&#x27;t load.&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">style</span>=<span class="string">&quot;zoom:75%&quot;</span>/&gt;</span><span class="comment">&lt;!-- alt内为提示词--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>		<span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line">    title	<span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在此优先将解决办法写在此处，为其他人提供参考。</p>
<ol>
<li><p>根据报错信息，确认与服务器联通状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ping github.com</span><br></pre></td></tr></table></figure>

<p>能ping通说明不是github服务器问题。</p>
</li>
<li><p>尝试使用ssh访问github服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果能访问成功，说明本地密钥和github能匹配，连接异常不是密钥问题。连接正常时显示以下信息：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Hi repo-name! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>3.更改推送时的repo。打开hexo根目录<code>_config.yml</code>文件，更改为下方样式，其中repo-name为自己的仓库名。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:repo-name/repo-name.github.io.git</span> <span class="comment">##更换为ssh推送</span></span><br><span class="line">  <span class="comment">#repo: https://github.com/repo-name/repo-name.github.io.git ##https推送</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>至此，问题解决，有兴趣的可以观察下方的问题分析。</p>
</li>
</ol>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="语法冲突？"><a href="#语法冲突？" class="headerlink" title="语法冲突？"></a>语法冲突？</h3><p>博主首先对问题最直观的定位是**“插入图片的语法不统一”**导致的异常。相对于大多数网友选择的直接插入的方案，比如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">image name</span>](<span class="link">image-path/image.png</span>)</span><br></pre></td></tr></table></figure>

<p>我选择使用html语法插入，这种语法的好处有两个：</p>
<ol>
<li>参数和提示信息更多。比如可以调节图片的位置，center、left、right。或者缩放比例，再或者是图片无法加载的提示信息。</li>
<li>可以加入对图片的解释，对于曲线类的图片，有题注说明会更清晰。</li>
<li>markdown和localhost都可以直接预览。</li>
</ol>
<p>随后到hexo官方查阅<a href="https://hexo.io/zh-cn/docs/troubleshooting">故障排除 | Hexo</a>的资料，搜索关键词“somthing wrong”定位到<strong>模型渲染错误</strong>一节，认为是语法错误，按其意见尝试修改，见下方第1点。</p>
<p>在网络上搜索使用html语法插入图片的相关问题、解决方案，无果。尝试修改语法，逐步去查找原因：</p>
<ol>
<li>在html语法段加上<code>&#123;&#123;&#125;&#125;</code>，仍然异常。</li>
<li>删除所有html语法，仍然异常。</li>
<li>删除 .md文件的空格，仍然异常。</li>
</ol>
<p>到此，即可排除是文件名空格、中文字符、html语法的问题。<span style="color:red"><strong>后来发现something wrong是很笼统的错误提示，需要向前或向后找更详细的提示。</strong></span></p>
<h3 id="连接异常！"><a href="#连接异常！" class="headerlink" title="连接异常！"></a>连接异常！</h3><p>考虑到hexo推送机制底层还是调用git，如果出现问题，git应该能获得更多信息。果然搜索到类似的帖子，概括的解释如下：</p>
<blockquote>
<p>错误代码502意味着网络问题，可能是服务器端关闭或者是访问端的网络波动。首先需要检查你的防火墙、代理、以及网关是否拦截了访问。</p>
</blockquote>
<p>从这段解释里引出了对场景变化的第二个考虑，<strong>网络变化-从单位的网络变为手机热点，可能是运营商拦截？</strong></p>
<p>但是却能ping通github服务器，进一步考虑到是否是密钥过期，或者是电脑上的密钥被清理。（之前github曾出现过短期密钥，密钥过期导致无法访问）</p>
<p>随后建立新的密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;you-email@emil.com&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/lenovo/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>

<p>回车保存在默认路径下，覆盖原有文件。使用下方指令copy密钥值粘贴到github端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>新建密钥之后将ssh连接的端口从默认22修改为不常被拦截的443端口，用记事本或者notepad等打开git安装目录下&#x2F;etc&#x2F;ssh&#x2F;ssh_config文件，在末尾加入：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    Hostname ssh.github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    Port 443</span><br></pre></td></tr></table></figure>

<p>重新使用ssh访问github，记得输入yes确认：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>截止到此，ssh访问应该不会出问题了。但是hexo部署仍然有问题，继续查找原因，发现ssh访问没问题的话，可能出在git端的配置上。查找网络资料，发现git可以通过以下两条指令切换https、或者ssh协议：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote set-url origin https://github.com/repo-name/repo-name.github.io.git <span class="comment">##切换https协议</span></span><br><span class="line">$ git remote set-url origin git@github.com:repo-name/repo-name.github.io.git                </span><br></pre></td></tr></table></figure>

<p>类比思考，hexo是将协议集成在了配置文件 <code>_config.yml</code>内，如下方配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:repo-name/repo-name.github.io.git</span> <span class="comment">##更换为ssh推送</span></span><br><span class="line">  <span class="comment">#repo: https://github.com/repo-name/repo-name.github.io.git ##https推送</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>因此，将修改repo参数即可修改deploy时的协议，更换为ssh协议后即推送成功。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【1】<a href="https://hexo.io/zh-cn/docs/troubleshooting">故障排除 | Hexo</a></p>
<p>【2】<a href="https://blog.xihann.top/2024/01/21/hexo-d%E6%8A%A5%E9%94%99%E5%8F%8A%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/">hexo d报错及原因分析 | 惜寒のBlog~</a></p>
<p>【3】<a href="https://www.cnblogs.com/zolich/p/12906838.html#1-%E5%85%88%E7%9C%8B%E7%9C%8B%E6%9C%AC%E5%9C%B0%E6%9C%89%E6%B2%A1%E6%9C%89ssh%E5%AF%86%E9%92%A5">GitHub使用SSH连接以及生成修改添加密钥详细过程 | zolich - 博客园</a></p>
<p>【4】<a href="https://stackoverflow.com/questions/44594353/the-requested-url-returned-error-502-corporate">The requested URL returned error 502, corporate? | Stack overflow</a></p>
<p>【5】<a href="https://blog.csdn.net/2303_79611263/article/details/140346864">解决将Hexo部署到GitHub时报错：Error: Spawn failed_hexo无法部署到github | CSDN博客</a></p>
<p>【6】<a href="https://blog.csdn.net/qq_33316784/article/details/104538400">git相互切换ssh和http协议(一看就懂版)_git 修改 ssh url | CSDN博客</a></p>
<p align="center">---------------------------  End  ---------------------------</p>

<blockquote>
<p><em>寂寞空庭春欲晚，梨花满地不开门。—— 春怨</em></p>
</blockquote>
]]></content>
      <categories>
        <category>实用工具</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
</search>
